{"version":3,"sources":["Answer.js","ModalWinner.js","Game.js","Info.js","App.js","serviceWorker.js","index.js"],"names":["Answer","props","Segment","inverted","List","divided","relaxed","answer","map","Item","key","Content","Header","bullsCount","length","cowsCount","attemptCount","content","ModalWinner","state","modalOpen","handleOpen","setState","handleClose","restartGame","prevProps","prevState","gameWon","this","Modal","basic","size","open","onClose","icon","Icon","name","Actions","Button","color","onClick","Component","Game","guessNumber","secretNumber","attempts","started","randomNumber","str","arr","i","Math","round","random","j","splice","push","console","log","join","startGame","handleInputChange","event","target","value","reset","checkAnswer","preventDefault","test","secretArray","guessArray","bulls","cows","split","forEach","index","indexOf","newAttempt","Date","now","Divider","hidden","Form","noValidate","autoComplete","Field","style","fontSize","marginBottom","Input","placeholder","onFocus","e","onBlur","width","onChange","disabled","primary","Info","Message","info","floating","App","className","Container","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.db3c9463.chunk.js","sourcesContent":["import React from 'react';\nimport { List, Segment } from 'semantic-ui-react';\n\nconst Answer = props => {\n\n  return (\n    <Segment inverted>\n      <List divided inverted relaxed>\n        {props.answer.map(answer => (\n          <List.Item key={answer.key}>\n            <List.Content>\n              <List.Header>{answer.bullsCount}{\" \"}\n                {answer.bullsCount.length > 0 ? \"Bulls\" : \"Bull\"}{\" \"}\n                {answer.cowsCount} Cows</List.Header>\n              <br />\n                ATTEMPT{answer.attemptCount} : {answer.content}\n            </List.Content>\n          </List.Item>\n        ))}\n      </List>\n    </Segment>\n  )\n}\n\nexport default Answer;","import React, { Component } from 'react'\nimport { Button, Header, Icon, Modal } from 'semantic-ui-react'\n\nclass ModalWinner extends Component {\n\n  state = {\n    modalOpen: false\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.gameWon !== this.props.gameWon && this.props.gameWon) {\n      this.handleOpen();\n    }\n  }\n\n  handleOpen = () => this.setState({ modalOpen: true });\n\n  handleClose = () => {\n    this.setState({ modalOpen: false });\n    this.props.restartGame();\n  };\n\n  render() {\n    return (\n      <Modal basic size='small' open={this.state.modalOpen} onClose={this.handleClose} >\n        <Header icon>\n          <Icon name='like' />\n        Win\n      </Header>\n        <Modal.Content>\n          <p>\n            You have won this game, play again.\n          </p>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button color='green' inverted onClick={this.handleClose}>\n            <Icon name='checkmark' /> OK\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    )\n  }\n}\n\nexport default ModalWinner;","import React, { Component, Fragment } from 'react';\nimport { Button, Divider, Form, Icon, Input } from 'semantic-ui-react';\nimport Answer from './Answer';\nimport ModalWinner from './ModalWinner';\nimport './Game.css';\n\nclass Game extends Component {\n  state = {\n    guessNumber: '',\n    secretNumber: '',\n    attempts: [],\n    attemptCount: 0,\n    gameWon: false,\n    started: false\n  };\n\n  randomNumber = () => {\n    let str = '';\n    let arr = [];\n    for (let i = 0; i < 4; i++) {\n      str = Math.round(Math.random() * (10 - i));\n      for (let j = 0; j < arr.length; j++) {\n        if (arr[j] === str) {\n          arr.splice(j, 1);\n          i--;\n        }\n      }\n      arr.push(str);\n    }\n    console.log(arr.join(''));\n    return arr.join('');\n  };\n\n  startGame = () => this.setState({\n    secretNumber: this.randomNumber(),\n    started: true\n  });\n\n  handleInputChange = event => {\n    if (event.target.value.length <= 4) {\n      this.setState({\n        guessNumber: event.target.value\n      });\n    }\n  };\n\n  reset = () =>\n    this.setState({\n      guessNumber: ''\n    });\n\n  restartGame = () =>\n    this.setState({\n      guessNumber: '',\n      secretNumber: '',\n      attempts: [],\n      attemptCount: 0,\n      gameWon: false,\n      started: false\n    });\n\n  checkAnswer = event => {\n    event.preventDefault();\n    const { guessNumber, secretNumber, attemptCount } = this.state;\n\n    const re = /^\\d{4}$/;\n    if (re.test(guessNumber)) {\n      let secretArray = [],\n        guessArray = [],\n        bulls = 0,\n        cows = 0;\n      secretArray = secretNumber.split(\"\");\n      guessArray = guessNumber.split(\"\");\n      secretArray.forEach((key, index) => {\n        if (secretArray[index] === guessArray[index]) {\n          bulls = bulls + 1;\n          secretArray[index] = \"X\";\n          guessArray[index] = \"Z\";\n        }\n      });\n      secretArray.forEach((key, index) => {\n        if (secretArray.indexOf(guessArray[index]) >= 0) {\n          secretArray[secretArray.indexOf(guessArray[index])] = \"\";\n          cows = cows + 1;\n        }\n      });\n\n      if (bulls === 4) {\n        this.setState({\n          gameWon: true\n        });\n      }\n\n      let newAttempt = {\n        key: Date.now(),\n        content: guessNumber,\n        bullsCount: bulls,\n        cowsCount: cows,\n        attemptCount: attemptCount + 1\n      };\n\n      this.setState(prevState => {\n        return {\n          guessNumber: \"\",\n          attemptCount: prevState.attemptCount + 1,\n          attempts: [newAttempt, ...prevState.attempts]\n        };\n      });\n    }\n  };\n\n  render() {\n    const { guessNumber, attempts, gameWon, started } = this.state;\n\n    return (\n      <Fragment>\n        <ModalWinner gameWon={gameWon} restartGame={this.restartGame} />\n        <Button color='green' onClick={this.startGame}><Icon name='play' />START</Button>\n        <Button color='red' onClick={this.restartGame}><Icon name='refresh' />PLAY AGAIN</Button>\n\n        <Divider hidden />\n\n        <Form noValidate autoComplete=\"off\">\n          <Form.Field>\n            <label style={{\n              color: \"white\", fontSize: \"2rem\", marginBottom: \"10px\"\n            }}>Guess</label>\n            <Input\n              placeholder=\"0000\"\n              onFocus={e => (e.target.placeholder = \"\")}\n              onBlur={e => (e.target.placeholder = \"0000\")}\n              value={guessNumber}\n              style={{\n                width: \"240px\", fontSize: \"2rem\"\n              }}\n              onChange={this.handleInputChange}\n              disabled={!started}\n            />\n          </Form.Field>\n\n          <Button primary onClick={this.checkAnswer}>Submit</Button>\n          <Button onClick={this.reset}>Reset</Button>\n        </Form>\n        {\n          attempts.length > 0\n            ?\n            <Answer answer={attempts} /> : null\n        }\n      </Fragment >\n    );\n  }\n}\n\nexport default Game;","import React from 'react';\nimport { Icon, Message } from 'semantic-ui-react';\n\nconst Info = () => (\n  <Message info floating>\n    <Message.Header>\n      <Icon name=\"question circle\" /> How to play\n    </Message.Header>\n    <p>The goal of this game is to guess a 4-digit number within the least number of attempts possible.</p>\n    <p>With every guess, you will get a feedback indicating how many Bulls and Cows you got with the guess.</p>\n    <p>A Bull means: one of the digits is correct, and is also at the right place.</p>\n    <p>A Cow means: one of the digits is a right number, but not at the right place.</p>\n    <p> For example, given that the answer is 0130, a guess of 3610 will receive 1 Bull 2 Cows. 1 Bull is 0, 2 Cows are 1 and 3.</p>\n  </Message>\n);\n\nexport default Info;","import React from 'react';\nimport Game from './Game';\nimport Info from './Info';\nimport { Container } from 'semantic-ui-react'\nimport './App.css';\n\nconst App = () => (\n  <div className=\"App\" >\n    <Container>\n      <h1>Bulls and Cows game</h1>\n      <Info />\n      <Game />\n      <a className=\"sourceLink\" href=\"https://github.com/Nicole-tu/bulls-cows-react\">https://github.com/Nicole-tu/bulls-cows-react</a>\n    </Container>\n    <div className=\"backgroundFont\">\n      <p>1A2B</p>\n      <p>2A1B</p>\n      <p>0A3B</p>\n    </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}